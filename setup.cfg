[metadata]
name = headfake
description = Health data faker
long_descripton = file: README.md
author = Rob Free
author_email = rcfree@pm.me
license = MIT
license_files = LICENSE.md
long_description_content_type = text/markdown
long_description = file: README.md, LICENSE.md
keywords = fake, data, generation, faker, pydbgen

## What is Headfake?
It is **Hea**lth **d**ata **fake**r: a Python-based package which allows the user to create fake or test data sets from a
YAML template file.

The package can be embedded directly into Python scripts, or it can be used through a command-line script.

It builds upon some of the ideas in [pydbgen](https://github.com/tirthajyoti/pydbgen) and improves on it with support for
a number of additional features including statistically distributed random values; dependent fields and custom fields.

## Why would I use Headfake?
Headfake makes it simple and straightforward to generate fake or test data. It has a number of features which make this easier:

* Support for shareable template-based config or direct Python implementation to setup and perform the data generation.

* Embeddable data generation into projects (either using a YAML config or constructing the classes manually).

* Generation of names and contact details through use of the Python package [Faker](https://faker.readthedocs.io/en/master/index.html).

* Randomised names can be output based on a gender field.

* More realistic simulated data uses statistical distributions to create date of birth and also probability-based option values. Other approaches to simulate real data are also being investigated.

* Clinical data supported includes random NHS numbers and deceased flags/date of death based on age-based odds of death.

* Dependent fields (e.g. one field's values are dependent on the values from one or more)

* Field data can be looked up from another file using a key field, allowing re-use of patient details in a different field set.

* A selection of fields to handle generation of different types of data.

* Ability to create and use custom fields to generate your own data types and values

* Support for transformers which pre or post-process data once it's been generated

## How do I install and use Headfake?
To install Headfake please go to the [Installation](docs/installation) page and then start with the [Tutorials](docs/tutorials/tutorial1) or the [usage page](docs/usage).

## Is Headfake being actively maintained?
Yes, we are using Headfake is our own projects and as result are keep it maintained and adding new features when we need them.

## Is Headfake suitable for my project?
The library has been released under an MIT license so can be embedded into your own tools with minimal restrictions on use.

## If I use Headfake to generate data in my research project which source should I cite?
We are working on a journal paper, for now please cite the project URL (https://rcfgroup.org/headfake).

url = https://github.com/rcfgroup
edit_on_github = True
github_project = rcfgroup/headfake
classifiers =
    Programming Language :: Python  
    Programming Language :: Python :: 3  
    Programming Language :: Python :: 3.5  
    Programming Language :: Python :: 3.6  
    Programming Language :: Python :: 3.7  
    Programming Language :: Python :: 3.8  
    Development Status :: 5 - Production/Stable  
    Intended Audience :: Healthcare Industry  
    Intended Audience :: Science/Research  
    License :: OSI Approved :: MIT License  
    Natural Language :: English  
    Operating System :: OS Independent  
    Topic :: Scientific/Engineering :: Artificial Intelligence  
    Topic :: Scientific/Engineering :: Bio-Informatics  

[options]
python_requires = >=3.6
packages = find:
include_package_data = True
setup_requires = setuptools_scm
install_requires =
  attrs
  faker
  pandas
  pyyaml
  scipy

[options.entry_points]
console_scripts =
  headfake = headfake.cli:Command.run

[options.extras_require]
tests =
  pytest
  pytest-cov
  pytest-mock
docs =
  mkdocs


[tool:pytest]
minversion = 3.0
testpaths = "tests"
norecursedirs = ".tox" "build" "docs[\/]_build" "docs[\/]generated" "*.egg-info"

[pycodestyle]
max_line_length = 100

[flake8]
max-line-length = 100

[coverage:report]
exclude_lines =
  # Have to re-enable the standard pragma
  pragma: no cover
  # Don  t complain about packages we have installed
  except ImportError
  # Don  t complain if tests don  t hit assertions
  raise AssertionError
  raise NotImplementedError
  # Don  t complain about script hooks
  def main\(.*\):
  # Ignore branches that don  t pertain to this version of Python
  pragma: py{ignore_python_version}


[isort]
multi_line_output=3
force_grid_wrap=0
use_parentheses=True
line_length = 100
not_skip = __init__.py
sections = FUTURE, STDLIB, THIRDPARTY, FIRSTPARTY, LOCALFOLDER
default_section = THIRDPARTY
known_first_party = clinicle
include_trailing_comma = True
length_sort = True
